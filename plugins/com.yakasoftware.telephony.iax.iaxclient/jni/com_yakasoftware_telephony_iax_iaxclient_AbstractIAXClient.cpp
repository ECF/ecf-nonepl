/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient.h"
#include "iaxclient.h"
/* Implementation for class com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient */

// A global callback function used by libiaxclient
int event_callback(iaxc_event e);

// initialize tone that will be played
//static iaxc_sound initTone(int f1, int f2, int duration, int length, int repeat);

JavaVM *globalJVMRef;
jclass globalClsRef = NULL;
jobject globalObjectInstance = NULL;

jmethodID globalMID_eventCallback;

jclass class_Event_Audio_Constructor;
jclass class_Event_State_Constructor;
jclass class_Event_Level_Constructor;
jclass class_Event_NetStats_Constructor;
jclass class_Event_Registration_Constructor;
jclass class_Event_Text_Constructor;
jclass class_Event_URL_Constructor;
jclass class_Event_Video_Constructor;
jclass class_Event_VideoStats_Constructor;

jmethodID globalMID_Event_Audio_Constructor;
jmethodID globalMID_Event_State_Constructor;
jmethodID globalMID_Event_Level_Constructor;
jmethodID globalMID_Event_NetStats_Constructor;
jmethodID globalMID_Event_Registration_Constructor;
jmethodID globalMID_Event_Text_Constructor;
jmethodID globalMID_Event_URL_Constructor;
jmethodID globalMID_Event_Video_Constructor;
jmethodID globalMID_Event_VideoStats_Constructor;

JNIEXPORT jint JNICALL
JNI_OnLoad(JavaVM *jvm, void *reserved)
{
	/* Get a reference to JVM, class type(s) and method ID(s) we need*/
	JNIEnv *env;
	globalJVMRef = jvm; /* cache the JavaVM pointer */
	if (jvm->GetEnv((void **)&env, JNI_VERSION_1_2)) {
		return JNI_ERR; /* JNI version not supported */
	}

	return JNI_VERSION_1_2;
}

JNIEXPORT void JNICALL
JNI_OnUnload(JavaVM *jvm, void *reserved)
{
	JNIEnv *env;
	if (jvm->GetEnv((void **)&env, JNI_VERSION_1_2)) {
		return;
	}
	env->DeleteWeakGlobalRef(globalClsRef);
	return;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    initialize
 * Signature: (I)V
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_initialize
  (JNIEnv *env, jobject obj, jint num_calls)
{
	jint retValue = -1;
	
	// Save the global ponter to the wrapper object singleton! Will be used for making calls across the JNI bridge.	
	// Hold an object instance for later intance field/method access
	globalObjectInstance = obj;
	
	// Get the class of the object and save it for later use...
	globalClsRef = env->GetObjectClass(globalObjectInstance);
	
	// Generate the method ID for methods that will later be called...
	globalMID_eventCallback = env->GetMethodID(globalClsRef, "eventCallback", "(Lcom/yakasoftware/telephony/iax/iaxclient/event/Callback_Event;)V");
	
	// Generate the constructor IDs for event objects that will later be created for callback...
	globalMID_eventCallback = env->GetMethodID(globalClsRef, "eventCallback", "(Lcom/yakasoftware/telephony/iax/iaxclient/event/Callback_Event;)V");
	
	class_Event_Audio_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_Audio");
	if (class_Event_Audio_Constructor != NULL)
	{
		globalMID_Event_Audio_Constructor = env->GetMethodID(class_Event_Audio_Constructor, "<init>", "(IIIIIILjava/lang/String;)V");
	}
	class_Event_State_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_State");
	if (class_Event_State_Constructor != NULL)
	{
		globalMID_Event_State_Constructor = env->GetMethodID(class_Event_State_Constructor, "<init>", "(IIII[C[C[C[C)V");
	}
	class_Event_Level_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_Level");
	if (class_Event_Level_Constructor != NULL)
	{
		globalMID_Event_Level_Constructor = env->GetMethodID(class_Event_Level_Constructor, "<init>", "(FF)V");
	}
	class_Event_NetStats_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_NetStats");
	if (class_Event_NetStats_Constructor != NULL)
	{
		globalMID_Event_NetStats_Constructor = env->GetMethodID(class_Event_NetStats_Constructor, "<init>", "(IILcom/yakasoftware/telephony/iax/iaxclient/util/NetStats;Lcom/yakasoftware/telephony/iax/iaxclient/util/NetStats;)V");
	}
	class_Event_Registration_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_Registration");
	if (class_Event_Registration_Constructor != NULL)
	{
		globalMID_Event_Registration_Constructor = env->GetMethodID(class_Event_Registration_Constructor, "<init>", "(III)V");
	}
	class_Event_Text_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_Text");
	if (class_Event_Text_Constructor != NULL)
	{
		globalMID_Event_Text_Constructor = env->GetMethodID(class_Event_Text_Constructor, "<init>", "()V");
	}
	class_Event_URL_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_URL");
	if (class_Event_URL_Constructor != NULL)
	{
		globalMID_Event_URL_Constructor = env->GetMethodID(class_Event_URL_Constructor, "<init>", "(II[C)V");
	}
	class_Event_Video_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_Video");
	if (class_Event_Video_Constructor != NULL)
	{
		globalMID_Event_Video_Constructor = env->GetMethodID(class_Event_Video_Constructor, "<init>", "(IIIIIIIILjava/lang/String;)V");
	}
	class_Event_VideoStats_Constructor = env->FindClass("com/yakasoftware/telephony/iax/iaxclient/event/Event_VideoStats");
	if (class_Event_VideoStats_Constructor != NULL)
	{
		globalMID_Event_VideoStats_Constructor = env->GetMethodID(class_Event_VideoStats_Constructor, "<init>", "(ILcom/yakasoftware/telephony/iax/iaxclient/util/VideoStats;)V");
	}	
	
	// Set default codec to ULAW 
	iaxc_set_formats(IAXC_FORMAT_ULAW, IAXC_FORMAT_G723_1|IAXC_FORMAT_GSM|IAXC_FORMAT_ULAW|IAXC_FORMAT_ALAW|IAXC_FORMAT_G726|IAXC_FORMAT_ADPCM|IAXC_FORMAT_SLINEAR|IAXC_FORMAT_LPC10|IAXC_FORMAT_G729A|IAXC_FORMAT_SPEEX|IAXC_FORMAT_ILBC);
	
	// Initialize the library with the number of calls you want
	retValue = iaxc_initialize(num_calls);

	// Set the event CallBack Function for capuring events!
	iaxc_set_event_callback(event_callback);
	
	// Start the thread(s) that process the IAXClient action under the hood
	iaxc_start_processing_thread();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_shutdown
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_shutdown
  (JNIEnv *env, jobject obj)
{
	  // close any active calls
	  iaxc_dump_all_calls();
	  
	  // wait a bit.. 500 milliseconds == half a second!
	  iaxc_millisleep(500);
	  
	  // stop the thread
	  iaxc_stop_processing_thread();
	  
	  // shutdown ...cleanup
	  iaxc_shutdown();
}



/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_preferred_source_udp_port
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1preferred_1source_1udp_1port
  (JNIEnv *env, jobject obj, jint sourceUdpPort)
{
	iaxc_set_preferred_source_udp_port(sourceUdpPort);		
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_get_bind_port
 * Signature: ()S
 */
JNIEXPORT jshort JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1get_1bind_1port
  (JNIEnv *env, jobject obj)
{	
	short retValue;
	retValue = iaxc_get_bind_port();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_formats
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1formats
  (JNIEnv *env, jobject obj, jint preferred, jint allowed)
{
	iaxc_set_formats(preferred, allowed);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_min_outgoing_framesize
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1min_1outgoing_1framesize
  (JNIEnv *env, jobject obj, jint samples)
{
	iaxc_set_min_outgoing_framesize(samples);	
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_callerid
 * Signature: (Ljava/lang/String{  }Ljava/lang/String)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1callerid
  (JNIEnv *env, jobject obj, jstring name, jstring number)
{
    const char *cName = NULL;
    const char *cNumber = NULL;

    cName = env->GetStringUTFChars(name, NULL);
    cNumber = env->GetStringUTFChars(number, NULL);

    if( (cName != NULL) && (cNumber != NULL))
    {
    	iaxc_set_callerid(cName, cNumber);
    }

    env->ReleaseStringUTFChars(name, cName);
    env->ReleaseStringUTFChars(number, cNumber);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_start_processing_thread
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1start_1processing_1thread
  (JNIEnv *env, jobject obj)
{
	int retValue;
	retValue = iaxc_start_processing_thread();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_stop_processing_thread
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1stop_1processing_1thread
  (JNIEnv *env, jobject obj)
{
	int retValue;
	retValue = iaxc_stop_processing_thread();
	
	return retValue;	
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_call
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1call
  (JNIEnv *env, jobject obj, jstring num)
{
	int retValue;
	
	const char *cNum = NULL;

    cNum = env->GetStringUTFChars(num, NULL);

    if(cNum != NULL)
    {
    	retValue = iaxc_call(cNum);
    }

    env->ReleaseStringUTFChars(num, cNum);
	
	return retValue;    
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_unregister
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1unregister
  (JNIEnv *env, jobject obj, jint id)
{
	int retValue;
	retValue = iaxc_unregister(id);

	return retValue;	
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_register
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1register
  (JNIEnv *env, jobject obj, jstring user, jstring pass, jstring host)
{
	int retValue;
	
	const char *cUser = NULL;
	const char *cPass = NULL;
	const char *cHost = NULL;

    cUser = env->GetStringUTFChars(user, NULL);
    cPass = env->GetStringUTFChars(pass, NULL);
    cHost = env->GetStringUTFChars(host, NULL);

    if( (cUser != NULL) && (cPass != NULL) && (cHost != NULL))
    {
    	retValue = iaxc_register(cUser, cPass, cHost);
    }

    env->ReleaseStringUTFChars(user, cUser);
    env->ReleaseStringUTFChars(pass, cPass);
    env->ReleaseStringUTFChars(host, cHost);
    
    return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_send_busy_on_incoming_call
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1send_1busy_1on_1incoming_1call
  (JNIEnv *env, jobject obj, jint callNo)
{
	iaxc_send_busy_on_incoming_call(callNo);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_answer_call
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1answer_1call
  (JNIEnv *env, jobject obj, jint callNo)
{
	iaxc_answer_call(callNo);	
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_blind_transfer_call
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1blind_1transfer_1call
  (JNIEnv *env, jobject obj, jint callNo, jstring number)
{
	const char *cNumber = NULL;

    cNumber = env->GetStringUTFChars(number, NULL);

    if(cNumber != NULL)
    {
    	iaxc_blind_transfer_call(callNo, cNumber);
    }

    env->ReleaseStringUTFChars(number, cNumber);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_dump_all_calls
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1dump_1all_1calls
  (JNIEnv *env, jobject obj)
{
	iaxc_dump_all_calls();	
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_dump_call
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1dump_1call
  (JNIEnv *env, jobject obj)
{
	iaxc_dump_call();
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_reject_call
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1reject_1call
  (JNIEnv *env, jobject obj)
{
	iaxc_reject_call();
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_reject_call_number
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1reject_1call_1number
  (JNIEnv *env, jobject obj, jint callNo)
{
	iaxc_reject_call_number(callNo);	
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_send_dtmf
 * Signature: (C)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1send_1dtmf
  (JNIEnv *env, jobject obj, jchar digit)
{
	iaxc_send_dtmf((char)digit);	
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_send_text
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1send_1text
  (JNIEnv *env, jobject obj, jstring text)
{
	const char *cText = NULL;

    cText = env->GetStringUTFChars(text, NULL);

    if(cText != NULL)
    {
    	iaxc_send_text(cText);
    }

    env->ReleaseStringUTFChars(text, cText);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_send_url
 * Signature: (Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1send_1url
  (JNIEnv *env, jobject obj, jstring url, jint link)
{
	const char *cUrl = NULL;

    cUrl = env->GetStringUTFChars(url, NULL);

    if(cUrl != NULL)
    {
    	iaxc_send_url(cUrl, link);
    }

    env->ReleaseStringUTFChars(url, cUrl);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_millisleep
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1millisleep
  (JNIEnv *env, jobject obj, jlong ms)
{
	iaxc_millisleep((long)ms);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_silence_threshold
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1silence_1threshold
  (JNIEnv *env, jobject obj, jfloat thr)
{
	iaxc_set_silence_threshold(thr);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_audio_output
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1audio_1output
  (JNIEnv *env, jobject obj, jint mode)
{
	iaxc_set_audio_output(mode);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_select_call
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1select_1call
  (JNIEnv *env, jobject obj, jint callNo)
{
	int retValue;
	
	retValue = iaxc_select_call(callNo);
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_first_free_call
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1first_1free_1call
  (JNIEnv *env, jobject obj)
{
	int retValue;
	
	retValue = iaxc_first_free_call();
	
	return retValue;
}
/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_selected_call
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1selected_1call
  (JNIEnv *env, jobject obj)
{
	int retValue;
	
	retValue = iaxc_selected_call();
	
	return retValue;
}
/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_quelch
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1quelch
  (JNIEnv *env, jobject obj, jint callNo, jint MOH)
{
	int retValue;
	
	retValue = iaxc_quelch(callNo, MOH);
	
	return retValue;
}
/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_unquelch
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1unquelch
  (JNIEnv *env, jobject obj, jint call)
{
	int retValue;
	
	retValue = iaxc_unquelch(call);
	
	return retValue;
}
/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_mic_boost_get
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1mic_1boost_1get
  (JNIEnv *env, jobject obj)
{
	int retValue;
	
	retValue = iaxc_mic_boost_get();
	
	return retValue;
}
/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_mic_boost_set
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1mic_1boost_1set
  (JNIEnv *env, jobject obj, jint enable)
{
	int retValue;
	
	retValue = iaxc_mic_boost_set(enable);
	
	return retValue;
}
/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_version
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1version
  (JNIEnv *env, jobject obj, jstring ver)
{
	char *buf = "";
	const char *cVer = NULL;

    cVer = env->GetStringUTFChars(ver, NULL);

    if(cVer != NULL)
    {
    	//buf = iaxc_version(cFrame);
    }

    env->ReleaseStringUTFChars(ver, cVer);

    return env->NewStringUTF(buf);    
}
/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_jb_target_extra
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1jb_1target_1extra
  (JNIEnv *env, jobject obj, jlong value)
{
	iaxc_set_jb_target_extra((long)value);
}

///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_set_networking
// * Signature: (Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)V
// */
//JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1networking
//  (JNIEnv *env, jobject obj, jobject st, jobject rf){  }
//
///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_get_netstats
// * Signature: (IILcom/yakasoftware/telephony/iax/iaxclient/util/NetStats;Lcom/yakasoftware/telephony/iax/iaxclient/util/NetStats;)I
// */
//JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1get_1netstats
//  (JNIEnv *env, jobject obj, jint call, jint rtt, jobject local, jobject remote){  }
//
///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_audio_devices_get
// * Signature: (Lcom/yakasoftware/telephony/iax/iaxclient/util/AudioDevice;IIII)I
// */
//JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1audio_1devices_1get
//  (JNIEnv *env, jobject obj, jobject devs, jint nDevs, jint input, jint output, jint ring){  }

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_audio_devices_set
 * Signature: (III)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1audio_1devices_1set
  (JNIEnv *env, jobject obj, jint input, jint output, jint ring)
{
	int retValue;
	
	retValue = iaxc_audio_devices_set(input, output, ring);
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_input_level_get
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1input_1level_1get
  (JNIEnv *env, jobject obj)
{
	float retValue;
	
	retValue = iaxc_input_level_get();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_output_level_get
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1output_1level_1get
  (JNIEnv *env, jobject obj)
{
	float retValue;
	
	retValue = iaxc_output_level_get();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_input_level_set
 * Signature: (F)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1input_1level_1set
  (JNIEnv *env, jobject obj, jfloat level)
{
	int retValue;
	
	retValue = iaxc_input_level_set(level);
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_output_level_set
 * Signature: (F)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1output_1level_1set
  (JNIEnv *env, jobject obj, jfloat level)
{
	int retValue;
	
	retValue = iaxc_output_level_set(level);
	
	return retValue;
}

///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_play_sound
// * Signature: (Lcom/yakasoftware/telephony/iax/iaxclient/util/Sound;I)I
// */
//JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1play_1sound
//  (JNIEnv *env, jobject obj, jobject sound, jint ring)
//{  
//	  iaxc_sound* tone;
//	  tone = (iaxc_sound *)malloc(sizeof(iaxc_sound));
//	  tone->channel = 1;
//	  tone->len  = length;
//	  tone->data = (short *)calloc(tone->len , sizeof(short));
//
//	  for( int i=0;i < duration; i++ )
//	  {
//	    tone->data[i] = (short)(0x7fff*0.4*sin((double)i*f1*M_PI/8000))
//	                   + (short)(0x7fff*0.4*sin((double)i*f2*M_PI/8000));
//	  }
//
//	  tone->repeat = repeat;
//}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_stop_sound
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1stop_1sound
  (JNIEnv *env, jobject obj, jint id)
{
	int retValue;
	
	retValue = iaxc_stop_sound(id);
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_get_filters
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1get_1filters
  (JNIEnv *env, jobject obj)
{
	int retValue;
	
	retValue = iaxc_get_filters();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_filters
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1filters
  (JNIEnv *env, jobject obj, jint filters)
{
	iaxc_set_filters(filters);
}
///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_set_files
// * Signature: (Ljava/io/File;Ljava/io/File;)I
// */
//JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1files
//  (JNIEnv *env, jobject obj, jobject input, jobject output){  }

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_speex_settings
 * Signature: (IFIIII)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1speex_1settings
  (JNIEnv *env, jobject obj, jint decode_enhance, jfloat quality, jint bitrate, jint vbr, jint abr, jint complexity)
{
	iaxc_set_speex_settings(decode_enhance, quality, bitrate, vbr, abr, complexity);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_get_audio_prefs
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1get_1audio_1prefs
  (JNIEnv *env, jobject obj)
{
	int retValue;
	
	retValue = iaxc_get_audio_prefs();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_audio_prefs
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1audio_1prefs
  (JNIEnv *env, jobject obj, jint prefs)
{
	int retValue;
	
	retValue = iaxc_set_audio_prefs(prefs);
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_get_video_prefs
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1get_1video_1prefs
  (JNIEnv *env, jobject obj)
{
	int retValue;
	
	retValue = iaxc_get_video_prefs();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_set_video_prefs
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1video_1prefs
  (JNIEnv *env, jobject obj, jint prefs)
{
	int retValue;
	
	retValue = iaxc_set_video_prefs(prefs);
	
	return retValue;
}

///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    listVidCapDevices
// * Signature: (Ljava/lang/String;I)I
// */
//JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_listVidCapDevices
//  (JNIEnv *env, jobject obj, jstring buff, jint buffSize)
//{
//	int retValue;
//	
//    const jbyte *cBuff = NULL;
//    cBuff = env->GetStringUTFChars(buff, NULL);
//
//    if(cBuff != NULL)
//    {
//    	retValue = listVidCapDevices((char *)cBuff, buffSize);
//    }
//
//    env->ReleaseStringUTFChars(buff, cBuff);
//	
//	return retValue;
//}

///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_video_format_get_cap
// * Signature: (II)V
// */
//JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1video_1format_1get_1cap
//  (JNIEnv *env, jobject obj, jint preferred, jint allowed){  }

///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_video_format_get_cap
// * Signature: ()Lcom/yakasoftware/telephony/iax/iaxclient/util/VideoFormat;
// */
//JNIEXPORT jobject JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1video_1format_1get_1cap
//  (JNIEnv *env, jobject obj)
//{
//	 int preferred;
//	 int allowed;
//	 
//	 iaxc_video_format_get_cap(&preferred, &allowed);
//}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_video_format_set_cap
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1video_1format_1set_1cap
  (JNIEnv *env, jobject obj, jint preferred, jint allowed)
{
	iaxc_video_format_set_cap(preferred, allowed);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_video_format_set
 * Signature: (IIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1video_1format_1set
  (JNIEnv *env, jobject obj, jint preferred, jint allowed, jint framerate, jint bitrate, jint width, jint height, jint fs)
{
	iaxc_video_format_set(preferred, allowed, framerate, bitrate, width, height, fs);
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_video_params_change
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1video_1params_1change
  (JNIEnv *env, jobject obj, jint framerate, jint bitrate, jint width, jint height, jint fs)
{
	iaxc_video_params_change(framerate, bitrate, width, height, fs);

}

///*
// * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
// * Method:    iaxc_set_holding_frame
// * Signature: (C)I
// */
//JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1set_1holding_1frame
//  (JNIEnv *env, jobject obj, jchar frame)
//{
//	int retValue;
//
//	retValue = iaxc_set_holding_frame((char *)frame);
//
//	return retValue;
//}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_video_bypass_jitter
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1video_1bypass_1jitter
  (JNIEnv *env, jobject obj, jint jitter)
{
	int retValue;
	
	retValue = iaxc_video_bypass_jitter(jitter);
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_is_camera_working
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1is_1camera_1working
  (JNIEnv *env, jobject obj)
{
	int retValue;
	
	retValue = iaxc_is_camera_working();
	
	return retValue;
}

/*
 * Class:     com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient
 * Method:    iaxc_YUV420_to_RGB32
 * Signature: (IILjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_yakasoftware_telephony_iax_iaxclient_AbstractIAXClient_iaxc_1YUV420_1to_1RGB32
  (JNIEnv *env, jobject obj, jint width, jint height, jstring src, jstring dest)
{
	const char *cSrc = NULL;
	const char *cDest = NULL;

    cSrc = env->GetStringUTFChars(src, NULL);
    cDest = env->GetStringUTFChars(dest, NULL);

    if( (cSrc != NULL) && (cDest != NULL))
    {
    	iaxc_YUV420_to_RGB32(width, height, (char *)cSrc, (char *)cDest);
    }

    env->ReleaseStringUTFChars(src, cSrc);
    env->ReleaseStringUTFChars(dest, cDest);
}

int event_callback(iaxc_event e)
{
	jobject eventObject;	

	// Get the current environment from current thread!
	JNIEnv *currentEnvRef = NULL;
	globalJVMRef->AttachCurrentThread((void **)&currentEnvRef, NULL);
	
	if((currentEnvRef != NULL) && (globalClsRef != NULL))
	{
		switch (e.type) {
			case IAXC_EVENT_AUDIO:
				eventObject = currentEnvRef->NewObject(class_Event_Audio_Constructor, globalMID_Event_Audio_Constructor, e.ev.audio.callNo, e.ev.audio.ts, e.ev.audio.format,
						e.ev.audio.encoded, e.ev.audio.source, e.ev.audio.size,
						e.ev.audio.data);	
				break;
			case IAXC_EVENT_STATE:
				eventObject = currentEnvRef->NewObject(class_Event_State_Constructor, globalMID_Event_State_Constructor, 
								e.ev.call.callNo, e.ev.call.state, e.ev.call.format, e.ev.call.vformat, e.ev.call.remote, e.ev.call.remote_name, e.ev.call.local, e.ev.call.local_context);
				break;				
			case IAXC_EVENT_LEVELS:
				eventObject = currentEnvRef->NewObject(class_Event_Level_Constructor, globalMID_Event_Level_Constructor,
								e.ev.levels.input, e.ev.levels.output);																
				break;
			case IAXC_EVENT_NETSTAT:
				/*e.ev.netstats.local, e.ev.netstats.remote are Objects!*/
				eventObject = currentEnvRef->NewObject(class_Event_NetStats_Constructor, globalMID_Event_NetStats_Constructor,
								e.ev.netstats.callNo, e.ev.netstats.rtt, e.ev.netstats.local, e.ev.netstats.remote);
				break;				
			case IAXC_EVENT_REGISTRATION:
				eventObject = currentEnvRef->NewObject(class_Event_Registration_Constructor, globalMID_Event_Registration_Constructor,
								e.ev.reg.id, e.ev.reg.reply, e.ev.reg.msgcount);
				break;
			case IAXC_EVENT_DTMF:
				break;				
			case IAXC_EVENT_TEXT:
				eventObject = currentEnvRef->NewObject(class_Event_Text_Constructor, globalMID_Event_Text_Constructor,
								e.ev.text.type, e.ev.text.message);				
				break;
			case IAXC_EVENT_URL:
				eventObject = currentEnvRef->NewObject(class_Event_URL_Constructor, globalMID_Event_URL_Constructor,
								e.ev.url.callNo, e.ev.url.type, e.ev.url.url);				
				break;				
			case IAXC_EVENT_VIDEO:
				eventObject = currentEnvRef->NewObject(class_Event_Video_Constructor, globalMID_Event_Video_Constructor,
								e.ev.video.callNo, e.ev.video.ts, e.ev.video.format, e.ev.video.width, e.ev.video.height, e.ev.video.encoded, e.ev.video.source, e.ev.video.size, e.ev.video.data);					
				break;
			case IAXC_EVENT_VIDEOSTATS:
				eventObject = currentEnvRef->NewObject(class_Event_VideoStats_Constructor, globalMID_Event_VideoStats_Constructor,
								e.ev.videostats.callNo, e.ev.videostats.stats);					
				break;
			default:
				break;
		}	
	}
	else
	{
		// Don't have enough infor to callback to java layer!
	}
	
	// Fire through to the java laver!
	if(eventObject != NULL)
	{
		currentEnvRef->CallVoidMethod(globalObjectInstance, globalMID_eventCallback, eventObject);	
	}

	return 1;
}


//	initialize tone that will be played
//	static iaxc_sound initTone(int f1, int f2, int duration, int length, int repeat){}